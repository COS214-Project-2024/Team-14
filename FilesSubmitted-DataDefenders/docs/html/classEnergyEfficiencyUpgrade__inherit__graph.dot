digraph "EnergyEfficiencyUpgrade"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{EnergyEfficiencyUpgrade\n||+ EnergyEfficiencyUpgrade()\l+ applyUpgrade()\l+ getUpgradeCost()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Handles energy efficiency upgrades for buildings."];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{BuildingUpgrade\n|# building\l# upgradeLevel\l|+ BuildingUpgrade()\l+ ~BuildingUpgrade()\l+ getDescription()\l+ getCost()\l+ getBuildingType()\l+ getFloorArea()\l+ getMaxCapacity()\l+ setMaxCapacity()\l+ getUpgradeCost()\l+ add()\l+ remove()\l+ getUpgradeLevel()\l+ incrementUpgradeLevel()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classBuildingUpgrade.html",tooltip="Decorator class that adds upgrade functionality to Building objects."];
  Node3 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{Building\n|+ buildings\l# buildingType\l# name\l# floorArea\l# maxCapacity\l# currentOccupancy\l# maintenanceNeeded\l# energyUsage\l# Cost\l# securityLevel\l# capacityLevel\l# energyLevel\l# parentNeighborhood\l# resourceLevels\l- buildingTax\l- state\l- resourceRequirements\l|+ calculateTax()\l+ calculateTotalTax()\l+ Building()\l+ ~Building()\l+ setCost()\l+ print()\l+ incrementOccupancy()\l+ upgradeSecurity()\l+ upgradeEnergyEfficiency()\l+ upgradeCapacity()\land 22 more...\l+ cleanup()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classBuilding.html",tooltip="Abstract base class representing a building in the city."];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{CityComponent\n|# population\l# area\l|+ ~CityComponent()\l+ add()\l+ remove()\l+ getName()\l+ getPopulation()\l+ getArea()\l+ print()\l+ getComponents()\l+ findComponent()\l+ getBuildingType()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classCityComponent.html",tooltip="Abstract base class for city components in a composite pattern."];
  Node5 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{BaseBuilding\n||+ getDescription()\l+ getCost()\l+ ~BaseBuilding()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classBaseBuilding.html",tooltip="Abstract base class defining core building interface."];
  Node6 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{ResourceConsumer\n||+ ~ResourceConsumer()\l+ receiveResource()\l+ getResourceLevel()\l+ needsResource()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classResourceConsumer.html",tooltip="Abstract interface for entities that consume resources."];
}
